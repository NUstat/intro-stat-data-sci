[
  {
    "objectID": "index.html",
    "href": "index.html",
    "title": "Introduction to Statistics and Data Science",
    "section": "",
    "text": "This is the website for Introduction to Statistics and Data Science. This book starts you down the path of learning how to think with data using R. You’ll learn the basics of how to engage, explore, and examine many types of data arising from several contexts. Hopefully you’ll have fun and see how valuable it is to be able to critically think with data.\n\n\n\n\n\n\nWarning\n\n\n\nPlease note that this is a “development version” of this book for the new design of STAT 202. Meaning this is a work in progress being edited and updated as we go.\nWe would appreciate any feedback on typos and errors.\n\n\nThis open textbook is produced with support from Northwestern University Libraries and The Alumnae of Northwestern University."
  },
  {
    "objectID": "index.html#license",
    "href": "index.html#license",
    "title": "Introduction to Statistics and Data Science",
    "section": "License",
    "text": "License\nThis website is (and will always be) free to use, and is licensed under the Creative Commons Zero v1.0 Universal License. If you’d like to give back, please consider reporting a typo or leaving a pull request at github.com/NUstat/intro-stat-data-sci."
  },
  {
    "objectID": "preface.html",
    "href": "preface.html",
    "title": "Preface",
    "section": "",
    "text": "Help! I’m new to R and RStudio and I need to learn about them! However, I’m completely new to coding! What do I do?\nIf you’re asking yourself this question, then you’ve come to the right place! Start with our “Introduction for Students”."
  },
  {
    "objectID": "preface.html#introduction-for-students",
    "href": "preface.html#introduction-for-students",
    "title": "Preface",
    "section": "Introduction for students",
    "text": "Introduction for students\nThis book assumes no prerequisites: no algebra, no calculus, and no prior programming/coding experience. This is intended to be a gentle introduction to the practice of analyzing data and answering questions using data the way statisticians, data scientists, data journalists, and other researchers would.\nIn Figure 1 we present a flowchart of what you’ll cover in this book. You’ll first get started with data in Chapter 1, where you’ll learn about the difference between R and RStudio, start coding in R, understand what R packages are, and explore your first dataset: all domestic departure flights from a New York City airport in 2013. Then\n\nData Exploration: You’ll assemble your data science toolbox using tidyverse packages. In particular:\n\nCh. 2: Visualizing data via the ggplot2 package.\nCh. 3: Wrangling data via the dplyr package.\nCh. 4: Understanding the concept of “tidy” data as a standardized data input format for all packages in the tidyverse\n\nData Modeling: Using these data science tools, you’ll start performing data modeling. In particular:\n\nCh. 5: Constructing basic regression models.\nCh. 6: Constructing multiple regression models.\n\nStatistical Theory: Now you’ll learn about the role of randomization in making inferences and the general frameworks used to make inferences in statistics. In particular:\n\nCh. 7: Randomization and causality.\nCh. 8: Populations and generalizability.\nCh. 9: Sampling distributions.\n\nStatistical Inference: You’ll learn to combine your newly acquired data analysis and modeling skills with statistical theory to make inferences. In particular:\n\nCh. 10: Building confidence intervals.\nCh. 11: Calculating p-values.\nCh. 12: Conducting hypothesis tests.\n\n\n\n\n\nFigure 1: Course Flowchart\n\n\n\nWhat you will learn from this book\nWe hope that by the end of this book, you’ll have learned\n\nHow to use R to explore data.\nHow to generate research questions and hypotheses.\nHow to think like a statistician and the role of chance in your data.\nHow to answer statistical questions using tools like confidence intervals and hypothesis tests.\nHow to effectively create “data stories” using these tools.\n\nWhat do we mean by data stories? We mean any analysis involving data that engages the reader in answering questions with careful visuals and thoughtful discussion, such as How strong is the relationship between per capita income and crime in Chicago neighborhoods? and How many f**ks does Quentin Tarantino give (as measured by the amount of swearing in his films)?. Further discussions on data stories can be found in this Think With Google article.\nFor other examples of data stories constructed by students like yourselves, look at the final projects for two courses that have previously used a version of this book:\n\nMiddlebury College MATH 116 Introduction to Statistical and Data Sciences using student collected data.\nPacific University SOC 301 Social Statistics using data from the fivethirtyeight R package.\n\nThis book will help you develop your “data science toolbox”, including tools such as data visualization, data formatting, data wrangling, and data modeling using regression. With these tools, you’ll be able to perform the entirety of the “data/science pipeline” while building data communication skills.\nIn particular, this book will lean heavily on data visualization. In today’s world, we are bombarded with graphics that attempt to convey ideas. We will explore what makes a good graphic and what the standard ways are to convey relationships with data. You’ll also see the use of visualization to introduce concepts like mean, median, standard deviation, distributions, etc. In general, we’ll use visualization as a way of building almost all of the ideas in this book.\nTo impart the statistical lessons in this book, we have intentionally minimized the number of mathematical formulas used and instead have focused on developing a conceptual understanding via data visualization, statistical computing, and simulations. We hope this is a more intuitive experience than the way statistics has traditionally been taught in the past and how it is commonly perceived.\nFinally, you’ll learn the importance of literate programming. By this we mean you’ll learn how to write code that is useful not just for a computer to execute but also for readers to understand exactly what your analysis is doing and how you did it. This is part of a greater effort to encourage reproducible research (see subsection Reproducible research for more details). Hal Abelson coined the phrase that we will follow throughout this book:\n\n“Programs must be written for people to read, and only incidentally for machines to execute.”\n\nWe understand that there may be challenging moments as you learn to program. We still continue to struggle and find ourselves often using web searches to find answers and reach out to colleagues for help. In the long run though, we all can solve problems faster and more elegantly via programming. We wrote this book as our way to help you get started and you should know that there is a huge community of R users that are always happy to help everyone along as well. This community exists in particular on the internet on various forums and websites such as stackoverflow.com.\n\n\nData/science pipeline\nYou may think of statistics as just being a bunch of numbers. We commonly hear the phrase “statistician” when listening to broadcasts of sporting events. Statistics (in particular, data analysis), in addition to describing numbers like with baseball batting averages, plays a vital role in all of the sciences. You’ll commonly hear the phrase “statistically significant” thrown around in the media. You’ll see articles that say “Science now shows that chocolate is good for you.” Underpinning these claims is data analysis and a theoretical model relating the data collected in a sample to a larger population. By the end of this book, you’ll be able to better understand whether these claims should be trusted or whether we should be wary. Inside data analysis are many sub-fields that we will discuss throughout this book (though not necessarily in this order):\n\ndata collection\ndata wrangling\ndata visualization\ndata modeling\nstatistical inference\ncorrelation and regression\ninterpretation of results\ndata communication/storytelling\n\nThese sub-fields are summarized in what Grolemund and Wickham term the “Data/Science Pipeline” in Figure 2.\n\n\n\nFigure 2: Data/Science Pipeline\n\n\nWe will begin by digging into the gray Understand portion of the cycle with data visualization, then with a discussion on what is meant by tidy data and data wrangling, and then conclude by talking about interpreting and discussing the results of our models via Communication. These steps are vital to any statistical analysis. But why should you care about statistics? “Why did they make me take this class?”\nThere’s a reason so many fields require a statistics course. Scientific knowledge grows through an understanding of statistical significance and data analysis. You needn’t be intimidated by statistics. It’s not the beast that it used to be and, paired with computation, you’ll see how reproducible research in the sciences particularly increases scientific knowledge.\n\n\nReproducible research\n\n“The most important tool is the mindset, when starting, that the end product will be reproducible.” – Keith Baggerly\n\nAnother goal of this book is to help readers understand the importance of reproducible analyses. The hope is to get readers into the habit of making their analyses reproducible from the very beginning. This means we’ll be trying to help you build new habits. This will take practice and be difficult at times. You’ll see just why it is so important for you to keep track of your code and well-document it to help yourself later and any potential collaborators as well.\nCopying and pasting results from one program into a word processor is not the way that efficient and effective scientific research is conducted. It’s much more important for time to be spent on data collection and data analysis and not on copying and pasting plots back and forth across a variety of programs.\nIn a traditional analysis if an error was made with the original data, we’d need to step through the entire process again: recreate the plots and copy and paste all of the new plots and our statistical analysis into your document. This is error prone and a frustrating use of time. We’ll see how to use R Markdown to get away from this tedious activity so that we can spend more time doing science.\n\n“We are talking about computational reproducibility.” - Yihui Xie\n\nReproducibility means a lot of things in terms of different scientific fields. Are experiments conducted in a way that another researcher could follow the steps and get similar results? In this book, we will focus on what is known as computational reproducibility. This refers to being able to pass all of one’s data analysis, data-sets, and conclusions to someone else and have them get exactly the same results on their machine. This allows for time to be spent interpreting results and considering assumptions instead of the more error prone way of starting from scratch or following a list of steps that may be different from machine to machine."
  },
  {
    "objectID": "01-getting-started.html",
    "href": "01-getting-started.html",
    "title": "1  Getting Started with Data in R",
    "section": "",
    "text": "Before we can start exploring data in R, there are some key concepts to understand first:\nWe’ll introduce these concepts in upcoming Sections 1.1 - 1.3 If you are already somewhat familiar with these concepts, feel free to skip to Section 1.4 where we’ll introduce our first data set: all domestic flights departing a New York City airport in 2013. This is a dataset we will explore in depth in this book."
  },
  {
    "objectID": "01-getting-started.html#sec-r-rstudio",
    "href": "01-getting-started.html#sec-r-rstudio",
    "title": "1  Getting Started with Data in R",
    "section": "1.1 What are R and RStudio?",
    "text": "1.1 What are R and RStudio?\nFor much of this book, we will assume that you are using R via RStudio. First time users often confuse the two. At its simplest:\n\nR is like a car’s engine.\nRStudio is like a car’s dashboard.\n\n\n\n\n\n\n\n\nR: Engine\nRStudio: Dashboard\n\n\n\n\n\n\n\n\n\nMore precisely, R is a programming language that runs computations while RStudio is an integrated development environment (IDE) that provides an interface by adding many convenient features and tools. So just as having access to a speedometer, rearview mirrors, and a navigation system makes driving much easier, using RStudio’s interface makes using R much easier as well.\n\n1.1.1 Using RStudio Cloud\nRStudio Cloud (https://rstudio.cloud) is a hosted version of RStudio that allows you to begin coding directly from your browser - there is no software to install and nothing to configure on your computer.\nTo begin using RStudio Cloud use the link provided by your instructor to gain access to the classroom workspace. You will be prompted to create a free account or log in if you have an existing account.\nAfter you open RStudio Cloud, you should now have access to the classroom under ‘Spaces’ on the left hand side (in this case ‘Stat 202’).\n\nThroughout class you will be working on various activities. Once the instructor has made an activity available you will click on the classroom Workspace (Stat 202) to access the available projects. To begin working on an activity click ‘Start’. Once that activity project is open navigate to the ‘File’ pane and open the R Markdown ‘.Rmd’ file.\n\nYou can use RStudio Cloud for personal use as well by creating projects in ‘Your Workspace’. However, RStudio Cloud limits the number of projects and amount of accessible time so it is recommended that you later install the software on your own computer.\n\n\n1.1.2 Installing R and RStudio on your personal computer\n\nNote about RStudio Server or RStudio Cloud: If your instructor has provided you with a link and access to RStudio Server or RStudio Cloud, then you can skip this section. We do recommend after a few months of working on RStudio Server/Cloud that you return to these instructions to install this software on your own computer though. You will first need to download and install both R and RStudio (Desktop version) on your computer. It is important that you install R first and then install RStudio second.\n\n\nYou must do this first: Download and install R.\n\nIf you are a Windows user: Click on “Download R for Windows”, then click on “base”, then click on the Download link.\nIf you are macOS user: Click on “Download R for (Mac) OS X”, then under “Latest release:” click on R-X.X.X.pkg, where R-X.X.X is the version number. For example, the latest version of R as of August 10, 2019 was R-3.6.1.\n\nYou must do this second: Download and install RStudio.\n\nScroll down to “Installers for Supported Platforms” near the bottom of the page.\nClick on the download link corresponding to your computer’s operating system.\n\n\n\n\n1.1.3 Using R via RStudio\nRecall our car analogy from above. Much as we don’t drive a car by interacting directly with the engine but rather by interacting with elements on the car’s dashboard, we won’t be using R directly but rather we will use RStudio’s interface. After you install R and RStudio on your computer, you’ll have two new programs AKA applications you can open. We will always work in RStudio and not R. In other words:\n\n\n\n\n\n\n\nR: Do not open this\nRStudio: Open this\n\n\n\n\n\n\n\n\n\nAfter you open RStudio, you should see the following:\n\nNote the three panes, which are three panels dividing the screen: The Console pane, the Files pane, and the Environment pane. Over the course of this chapter, you’ll come to learn what purpose each of these panes serve."
  },
  {
    "objectID": "01-getting-started.html#sec-code",
    "href": "01-getting-started.html#sec-code",
    "title": "1  Getting Started with Data in R",
    "section": "1.2 How do I code in R?",
    "text": "1.2 How do I code in R?\nNow that you’re set up with R and RStudio, you are probably asking yourself “OK. Now how do I use R?” The first thing to note as that unlike other statistical software programs like Excel, STATA, or SAS that provide point and click interfaces, R is an interpreted language, meaning you have to enter in R commands written in R code. In other words, you have to code/program in R. Note that we’ll use the terms “coding” and “programming” interchangeably in this book.\nWhile it is not required to be a seasoned coder/computer programmer to use R, there is still a set of basic programming concepts that R users need to understand. Consequently, while this book is not a book on programming, you will still learn just enough of these basic programming concepts needed to explore and analyze data effectively.\n\n1.2.1 Creating your first R Markdown document\nR Markdown allows you to easily create a document which combines your code, the results from your code, as well as any text that accompanies the analysis. To create a new R Markdown file, in R Studio select File>New File>R Markdown. Then, you will see a window pop-up titled New R Markdown. Here, you specify the type of file you wish to create. HTML is generally the recommended document type since it does not have traditional page separators like PDF and Word do. You can also choose a title and author for your document using their respective fields. Finally, select Ok to create your new R Markdown file. You will see it appear as a tab in your R Studio session. Click the save icon to save your new document.\nThe following is an example of an R Markdown document:\n\n\nSave your document.\nClick knit to compile your R Markdown into the document file type that you specified. The file will be saved in your Files pane. This will also save your document.\nInsert a new code chunk in your document where the cursor is located. You will often have many code chunks in your document.\nRun the current code chunk.\n\nWhen you create your Markdown file and knit it into a document, the chunks are run in order and any output from them is shown in the document, in the order and location that their respective chunk appears. Sometimes you may wish to type code or analyze data without it printing in the document. If that is the case, you type the code in the Console rather than in the .Rmd file.\nWhile you read through this book, it will be helpful to have an RMarkdown document open so you can copy code provided and paste it into a code chunk to run.\n\n\n1.2.2 Basic programming concepts and terminology\nWe now introduce some basic programming concepts and terminology. Instead of asking you to learn all these concepts and terminology right now, we’ll guide you so that you’ll “learn by doing.” Note that in this book we will always use a different font to distinguish regular text from computer_code. The best way to master these topics is, in our opinions, “learning by doing” and lots of repetition.\n\nBasics:\n\nConsole: Where you enter in commands. \nRunning code: The act of telling R to perform an action by giving it commands in the console.\nObjects: Where values are saved in R. In order to do useful and interesting things in R, we will want to assign a name to an object. For example we could do the following assignments: x <- 44 - 20 and three <- 3. This would allow us to run x + three which would return 27.\nData types: Integers, doubles/numerics, logicals, and characters.\n\n\nIn R Studio try typing the following code into the console or code chunk.\n\nx <- 44-20\nthree <- 3\nx+three\n\n[1] 27\n\n\nYou should see x and three appear as stored objects in the Environment pane. Anything you store in the Environment pane can be referenced and used later. R can also be used as a calculator, notice how it evaluates x+three.\n\nVectors: A series of values. These are created using the c() function, where c() stands for “combine” or “concatenate”. For example: c(6, 11, 13, 31, 90, 92).\nFactors: Categorical data are represented in R as factors.\nData frames: Data frames are like rectangular spreadsheets: they are representations of datasets in R where the rows correspond to observations and the columns correspond to variables that describe the observations. We’ll cover data frames later in Section Section 1.4.\nConditionals:\n\nTesting for equality in R using == (and not = which is typically used for assignment). Ex: 2 + 1 == 3 compares 2 + 1 to 3 and is correct R code, while 2 + 1 = 3 will return an error.\nBoolean algebra: TRUE/FALSE statements and mathematical operators such as < (less than), <= (less than or equal), and != (not equal to).\nLogical operators: & representing “and” as well as | representing “or.” Ex: (2 + 1 == 3) & (2 + 1 == 4) returns FALSE since both clauses are not TRUE (only the first clause is TRUE). On the other hand, (2 + 1 == 3) | (2 + 1 == 4) returns TRUE since at least one of the two clauses is TRUE.\n\nFunctions, also called commands: Functions perform tasks in R. They take in inputs called arguments and return outputs. You can either manually specify a function’s arguments or use the function’s default values.\n\nThis list is by no means an exhaustive list of all the programming concepts and terminology needed to become a savvy R user; such a list would be so large it wouldn’t be very useful, especially for novices. Rather, we feel this is a minimally viable list of programming concepts and terminology you need to know before getting started. We feel that you can learn the rest as you go. Remember that your mastery of all of these concepts and terminology will build as you practice more and more.\n\n\n1.2.3 Errors, warnings, and messages\nOne thing that intimidates new R and RStudio users is how it reports errors, warnings, and messages. R reports errors, warnings, and messages in a glaring red font, which makes it seem like it is scolding you. However, seeing red text in the console is not always bad.\nR will show red text in the console pane in three different situations:\n\nErrors: When the red text is a legitimate error, it will be prefaced with “Error in…” and try to explain what went wrong. Generally when there’s an error, the code will not run. For example, we’ll see in Subsection 1.3.3 if you see Error in ggplot(...) : could not find function \"ggplot\", it means that the ggplot() function is not accessible because the package that contains the function (ggplot2) was not loaded with library(ggplot2). Thus you cannot use the ggplot() function without the ggplot2 package being loaded first.\nWarnings: When the red text is a warning, it will be prefaced with “Warning:” and R will try to explain why there’s a warning. Generally your code will still work, but with some caveats. For example, you will see in Chapter 2 if you create a scatterplot based on a dataset where one of the values is missing, you will see this warning: Warning: Removed 1 rows containing missing values (geom_point). R will still produce the scatterplot with all the remaining values, but it is warning you that one of the points isn’t there.\nMessages: When the red text doesn’t start with either “Error” or “Warning”, it’s just a friendly message. You’ll see these messages when you load R packages in the upcoming Subsection 1.3.2 or when you read data saved in spreadsheet files with the read_csv() function as you’ll see in Chapter 4. These are helpful diagnostic messages and they don’t stop your code from working. Additionally, you’ll see these messages when you install packages too using install.packages().\n\nRemember, when you see red text in the console, don’t panic. It doesn’t necessarily mean anything is wrong. Rather:\n\nIf the text starts with “Error”, figure out what’s causing it. Think of errors as a red traffic light: something is wrong!\nIf the text starts with “Warning”, figure out if it’s something to worry about. For instance, if you get a warning about missing values in a scatterplot and you know there are missing values, you’re fine. If that’s surprising, look at your data and see what’s missing. Think of warnings as a yellow traffic light: everything is working fine, but watch out/pay attention.\nOtherwise the text is just a message. Read it, wave back at R, and thank it for talking to you. Think of messages as a green traffic light: everything is working fine.\n\n\n\n1.2.4 Tips on learning to code\nLearning to code/program is very much like learning a foreign language, it can be very daunting and frustrating at first. Such frustrations are very common and it is very normal to feel discouraged as you learn. However just as with learning a foreign language, if you put in the effort and are not afraid to make mistakes, anybody can learn.\nHere are a few useful tips to keep in mind as you learn to program:\n\nRemember that computers are not actually that smart: You may think your computer or smartphone are “smart,” but really people spent a lot of time and energy designing them to appear “smart.” Rather you have to tell a computer everything it needs to do. Furthermore the instructions you give your computer can’t have any mistakes in them, nor can they be ambiguous in any way.\nTake the “copy, paste, and tweak” approach: Especially when learning your first programming language, it is often much easier to taking existing code that you know works and modify it to suit your ends, rather than trying to write new code from scratch. We call this the copy, paste, and tweak approach. So early on, we suggest not trying to write code from memory, but rather take existing examples we have provided you, then copy, paste, and tweak them to suit your goals. Don’t be afraid to play around!\nThe best way to learn to code is by doing: Rather than learning to code for its own sake, we feel that learning to code goes much smoother when you have a goal in mind or when you are working on a particular project, like analyzing data that you are interested in.\nPractice is key: Just as the only method to improving your foreign language skills is through practice, practice, and practice; so also the only method to improving your coding is through practice, practice, and practice. Don’t worry however; we’ll give you plenty of opportunities to do so!"
  },
  {
    "objectID": "01-getting-started.html#sec-packages",
    "href": "01-getting-started.html#sec-packages",
    "title": "1  Getting Started with Data in R",
    "section": "1.3 What are R packages?",
    "text": "1.3 What are R packages?\nAnother point of confusion with many new R users is the idea of an R package. R packages extend the functionality of R by providing additional functions, data, and documentation. They are written by a world-wide community of R users and can be downloaded for free from the internet. For example, among the many packages we will use in this book are the ggplot2 package for data visualization in Chapter 2, the dplyr package for data wrangling in Chapter 3, and the moderndive package that accompanies this book.\nA good analogy for R packages is they are like apps you can download onto a mobile phone:\n\n\n\n\n\n\n\nR: A new phone\nR Packages: Apps you can download\n\n\n\n\n\n\n\n\n\nSo R is like a new mobile phone: while it has a certain amount of features when you use it for the first time, it doesn’t have everything. R packages are like the apps you can download onto your phone from Apple’s App Store or Android’s Google Play.\nLet’s continue this analogy by considering the Instagram app for editing and sharing pictures. Say you have purchased a new phone and you would like to share a recent photo you have taken on Instagram. You need to:\n\nInstall the app: Since your phone is new and does not include the Instagram app, you need to download the app from either the App Store or Google Play. You do this once and you’re set. You might do this again in the future any time there is an update to the app.\nOpen the app: After you’ve installed Instagram, you need to open the app.\n\nOnce Instagram is open on your phone, you can then proceed to share your photo with your friends and family. The process is very similar for using an R package. You need to:\n\nInstall the package: This is like installing an app on your phone. Most packages are not installed by default when you install R and RStudio. Thus if you want to use a package for the first time, you need to install it first. Once you’ve installed a package, you likely won’t install it again unless you want to update it to a newer version.\n“Load” the package: “Loading” a package is like opening an app on your phone. Packages are not “loaded” by default when you start RStudio on your computer; you need to “load” each package you want to use every time you start RStudio.\n\nLet’s now show you how to perform these two steps for the ggplot2 package for data visualization.\n\n1.3.1 Package installation\n\nNote about RStudio Server: If your instructor has provided you with a link and access to RStudio Server, you probably will not need to install packages, as they have likely been pre-installed for you by your instructor. That being said, it is still a good idea to know this process for later on when you are not using RStudio Server, but rather RStudio Desktop on your own computer.\n\nThere are two ways to install an R package. For example, to install the ggplot2 package:\n\nEasy way: In the Files pane of RStudio:\n\nClick on the “Packages” tab\nClick on “Install”\nType the name of the package under “Packages (separate multiple with space or comma):” In this case, type ggplot2\nClick “Install”\n\n\nSlightly harder way: An alternative but slightly less convenient way to install a package is by typing install.packages(\"ggplot2\") in the Console pane of RStudio and hitting enter. Note you must include the quotation marks.\n\nMuch like an app on your phone, you only have to install a package once. However, if you want to update an already installed package to a newer verions, you need to re-install it by repeating the above steps.\n\n\n\n\n\n\n🎯 Learning Check 1.1\n\n\n\nRepeat the above installing steps for the dplyr, nycflights13, and knitr packages. This will install the earlier mentioned dplyr package, the nycflights13 package containing data on all domestic flights leaving a NYC airport in 2013, and the knitr package for writing reports in R.\n\n\n\n\n1.3.2 Package loading\nRecall that after you’ve installed a package, you need to “load” it, in other words open it. We do this by using the library() command. For example, to load the ggplot2 package, run the following code in the Console pane. What do we mean by “run the following code”? Either type or copy & paste the following code into the Console pane and then hit the enter key.\n\nlibrary(ggplot2)\n\nIf after running the above code, a blinking cursor returns next to the > “prompt” sign, it means you were successful and the ggplot2 package is now loaded and ready to use. If however, you get a red “error message” that reads…\nError in library(ggplot2) : there is no package called ‘ggplot2’\n… it means that you didn’t successfully install it. In that case, go back to the previous subsection “Package installation” and install it.\n\n\n\n\n\n\n🎯 Learning Check 1.2\n\n\n\n“Load” the dplyr, nycflights13, and knitr packages as well by repeating the above steps.\n\n\n\n\n1.3.3 Package use\nOne extremely common mistake new R users make when wanting to use particular packages is that they forget to “load” them first by using the library() command we just saw. Remember: you have to load each package you want to use every time you start RStudio. If you don’t first “load” a package, but attempt to use one of its features, you’ll see an error message similar to:\nError: could not find function\nR is telling you that you are trying to use a function in a package that has not yet been “loaded.” Almost all new users forget do this when starting out, and it is a little annoying to get used to. However, you’ll remember with practice."
  },
  {
    "objectID": "01-getting-started.html#sec-nycflights13",
    "href": "01-getting-started.html#sec-nycflights13",
    "title": "1  Getting Started with Data in R",
    "section": "1.4 Explore your first dataset",
    "text": "1.4 Explore your first dataset\nLet’s put everything we’ve learned so far into practice and start exploring some real data! Data comes to us in a variety of formats, from pictures to text to numbers. Throughout this book, we’ll focus on datasets that are saved in “spreadsheet”-type format; this is probably the most common way data are collected and saved in many fields. Remember from Subsection 1.2.2 that these “spreadsheet”-type datasets are called data frames in R; we will focus on working with data saved as data frames throughout this book.\nLet’s first load all the packages needed for this chapter, assuming you’ve already installed them. Read Section 1.3 for information on how to install and load R packages if you haven’t already.\n\nlibrary(nycflights13)\nlibrary(dplyr)\nlibrary(knitr)\n\nAt the beginning of all subsequent chapters in this text, we’ll always have a list of packages that you should have installed and loaded to work with that chapter’s R code.\n\n1.4.1 nycflights13 package\nMany of us have flown on airplanes or know someone who has. Air travel has become an ever-present aspect in many people’s lives. If you live in or are visiting a relatively large city and you walk around that city’s airport, you see gates showing flight information from many different airlines. And you will frequently see that some flights are delayed because of a variety of conditions. Are there ways that we can avoid having to deal with these flight delays?\nWe’d all like to arrive at our destinations on time whenever possible. (Unless you secretly love hanging out at airports. If you are one of these people, pretend for the moment that you are very much anticipating being at your final destination.) Throughout this book, we’re going to analyze data related to flights contained in the nycflights13 package (Wickham 2021). Specifically, this package contains five data sets saved in five separate data frames with information about all domestic flights departing from New York City in 2013. These include Newark Liberty International (EWR), John F. Kennedy International (JFK), and LaGuardia (LGA) airports:\n\nflights: Information on all 336,776 flights\nairlines: A table matching airline names and their two letter IATA airline codes (also known as carrier codes) for 16 airline companies\nplanes: Information about each of 3,322 physical aircraft used.\nweather: Hourly meteorological data for each of the three NYC airports. This data frame has 26,115 rows, roughtly corresponding to the 365 \\(\\times\\) 24 \\(\\times\\) 3 = 26,280 possible hourly measurements one can observe at three locations over the course of a year.\nairports: Airport names, codes, and locations for 1,458 destination airports.\n\n\n\n1.4.2 flights data frame\nWe will begin by exploring the flights data frame that is included in the nycflights13 package and getting an idea of its structure. Run the following code in your console (either by typing it or cutting & pasting it): it loads in the flights dataset into your Console. Note depending on the size of your monitor, the output may vary slightly.\n\nflights\n\n# A tibble: 336,776 × 19\n    year month   day dep_time sched_de…¹ dep_d…² arr_t…³ sched…⁴ arr_d…⁵ carrier\n   <int> <int> <int>    <int>      <int>   <dbl>   <int>   <int>   <dbl> <chr>  \n 1  2013     1     1      517        515       2     830     819      11 UA     \n 2  2013     1     1      533        529       4     850     830      20 UA     \n 3  2013     1     1      542        540       2     923     850      33 AA     \n 4  2013     1     1      544        545      -1    1004    1022     -18 B6     \n 5  2013     1     1      554        600      -6     812     837     -25 DL     \n 6  2013     1     1      554        558      -4     740     728      12 UA     \n 7  2013     1     1      555        600      -5     913     854      19 B6     \n 8  2013     1     1      557        600      -3     709     723     -14 EV     \n 9  2013     1     1      557        600      -3     838     846      -8 B6     \n10  2013     1     1      558        600      -2     753     745       8 AA     \n# … with 336,766 more rows, 9 more variables: flight <int>, tailnum <chr>,\n#   origin <chr>, dest <chr>, air_time <dbl>, distance <dbl>, hour <dbl>,\n#   minute <dbl>, time_hour <dttm>, and abbreviated variable names\n#   ¹​sched_dep_time, ²​dep_delay, ³​arr_time, ⁴​sched_arr_time, ⁵​arr_delay\n\n\nLet’s unpack this output:\n\nA tibble: 336,776 x 19: A tibble is a kind of data frame used in R. This particular data frame has\n\n336,776 rows\n19 columns corresponding to 19 variables describing each observation\n\nyear month day dep_time sched_dep_time dep_delay arr_time are different columns, in other words variables, of this data frame.\nWe then have the first 10 rows of observations corresponding to 10 flights.\n... with 336,766 more rows, and 11 more variables: indicating to us that 336,766 more rows of data and 11 more variables could not fit in this screen.\n\nUnfortunately, this output does not allow us to explore the data very well. Let’s look at different tools to explore data frames.\n\n\n1.4.3 Exploring data frames\nAmong the many ways of getting a feel for the data contained in a data frame such as flights, we present three functions that take as their “argument”, in other words their input, the data frame in question. We also include a fourth method for exploring one particular column of a data frame:\n\nUsing the View() function built for use in RStudio. We will use this the most.\nUsing the glimpse() function, which is included in the dplyr package.\nUsing the kable() function, which is included in the knitr package.\nUsing the $ operator to view a single variable in a data frame.\n\n1. View():\nRun View(flights) in your Console in RStudio, either by typing it or cutting & pasting it into the Console pane, and explore this data frame in the resulting pop-up viewer. You should get into the habit of always Viewing any data frames that come your way. Note the capital “V” in View. R is case-sensitive so you’ll receive an error is you run view(flights) instead of View(flights).\n\n\n\n\n\n\n🎯 Learning Check 1.3\n\n\n\nWhat does any ONE row in this flights dataset refer to?\n\nData on an airline\nData on a flight\nData on an airport\nData on multiple flights\n\n\n\nBy running View(flights), we see the different variables listed in the columns and we see that there are different types of variables. Some of the variables like distance, day, and arr_delay are what we will call quantitative variables. These variables are numerical in nature. Other variables here are categorical.\nNote that if you look in the leftmost column of the View(flights) output, you will see a column of numbers. These are the row numbers of the dataset. If you glance across a row with the same number, say row 5, you can get an idea of what each row corresponds to. In other words, this will allow you to identify what object is being referred to in a given row. This is often called the observational unit. The observational unit in this example is an individual flight departing New York City in 2013. You can identify the observational unit by determining what “thing” is being measured or described by each of the variables.\n2. glimpse():\nThe second way to explore a data frame is using the glimpse() function included in the dplyr package. Thus, you can only use the glimpse() function after you’ve loaded the dplyr package. This function provides us with an alternative method for exploring a data frame:\n\nglimpse(flights)\n\nRows: 336,776\nColumns: 19\n$ year           <int> 2013, 2013, 2013, 2013, 2013, 2013, 2013, 2013, 2013, 2…\n$ month          <int> 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1…\n$ day            <int> 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1…\n$ dep_time       <int> 517, 533, 542, 544, 554, 554, 555, 557, 557, 558, 558, …\n$ sched_dep_time <int> 515, 529, 540, 545, 600, 558, 600, 600, 600, 600, 600, …\n$ dep_delay      <dbl> 2, 4, 2, -1, -6, -4, -5, -3, -3, -2, -2, -2, -2, -2, -1…\n$ arr_time       <int> 830, 850, 923, 1004, 812, 740, 913, 709, 838, 753, 849,…\n$ sched_arr_time <int> 819, 830, 850, 1022, 837, 728, 854, 723, 846, 745, 851,…\n$ arr_delay      <dbl> 11, 20, 33, -18, -25, 12, 19, -14, -8, 8, -2, -3, 7, -1…\n$ carrier        <chr> \"UA\", \"UA\", \"AA\", \"B6\", \"DL\", \"UA\", \"B6\", \"EV\", \"B6\", \"…\n$ flight         <int> 1545, 1714, 1141, 725, 461, 1696, 507, 5708, 79, 301, 4…\n$ tailnum        <chr> \"N14228\", \"N24211\", \"N619AA\", \"N804JB\", \"N668DN\", \"N394…\n$ origin         <chr> \"EWR\", \"LGA\", \"JFK\", \"JFK\", \"LGA\", \"EWR\", \"EWR\", \"LGA\",…\n$ dest           <chr> \"IAH\", \"IAH\", \"MIA\", \"BQN\", \"ATL\", \"ORD\", \"FLL\", \"IAD\",…\n$ air_time       <dbl> 227, 227, 160, 183, 116, 150, 158, 53, 140, 138, 149, 1…\n$ distance       <dbl> 1400, 1416, 1089, 1576, 762, 719, 1065, 229, 944, 733, …\n$ hour           <dbl> 5, 5, 5, 5, 6, 5, 6, 6, 6, 6, 6, 6, 6, 6, 6, 5, 6, 6, 6…\n$ minute         <dbl> 15, 29, 40, 45, 0, 58, 0, 0, 0, 0, 0, 0, 0, 0, 0, 59, 0…\n$ time_hour      <dttm> 2013-01-01 05:00:00, 2013-01-01 05:00:00, 2013-01-01 0…\n\n\nWe see that glimpse() will give you the first few entries of each variable in a row after the variable. In addition, the data type (see Subsection 1.2.2) of the variable is given immediately after each variable’s name inside < >. Here, int and dbl refer to “integer” and “double”, which are computer coding terminology for quantitative/numerical variables. In contrast, chr refers to “character”, which is computer terminology for text data. Text data, such as the carrier or origin of a flight, are categorical variables. The time_hour variable is an example of one more type of data type: dttm. As you may suspect, this variable corresponds to a specific date and time of day. However, we won’t work with dates in this class and leave it to a more advanced book on data science.\n\n\n\n\n\n\n🎯 Learning Check 1.4\n\n\n\nWhat are some examples in this dataset of categorical variables? What makes them different than quantitative variables?\n\n\n3. kable():\nThe another way to explore the entirety of a data frame is using the kable() function from the knitr package. Let’s explore the different carrier codes for all the airlines in our dataset two ways. Run both of these lines of code in your Console:\n\nairlines\nkable(airlines)\n\nAt first glance, it may not appear that there is much difference in the outputs. However when using tools for document production such as R Markdown, the latter code produces output that is much more legible and reader-friendly.\n4. $ operator\nLastly, the $ operator allows us to explore a single variable within a data frame. For example, run the following in your console\n\nairlines\nairlines$name\n\nWe used the $ operator to extract only the name variable and return it as a vector of length 16. We will only be occasionally exploring data frames using this operator, instead favoring the View() and glimpse() functions.\n\n\n1.4.4 Help files\nAnother nice feature of R is the help system. You can get help in R by entering a ? before the name of a function or data frame in question and you will be presented with a page showing the documentation. For example, let’s look at the help file for the flights data frame:\n\n?flights\n\nA help file should pop-up in the Help pane of RStudio. If you have questions about a function or data frame included in an R package, you should get in the habit of consulting the help file right away."
  },
  {
    "objectID": "01-getting-started.html#gs-conclusion",
    "href": "01-getting-started.html#gs-conclusion",
    "title": "1  Getting Started with Data in R",
    "section": "1.5 Conclusion",
    "text": "1.5 Conclusion\nWe’ve given you what we feel are the most essential concepts to know before you can start exploring data in R. Is this chapter exhaustive? Absolutely not. To try to include everything in this chapter would make the chapter so large it wouldn’t be useful!\n\n1.5.1 Additional resources\nIf you are completely new to the world of coding, R, and RStudio and feel you could benefit from a more detailed introduction, we suggest you check out Chester Ismay’s short book Getting used to R, RStudio, and R Markdown (Ismay 2016), which includes screencast recordings that you can follow along and pause as you learn. Furthermore, there is an introduction to R Markdown, a tool used for reproducible research in R.\n\n\n\n\n\nIsmay, Chester. 2016. Getting Used to r, RStudio, and r Markdown. http://ismayc.github.io/rbasics-book.\n\n\nWickham, Hadley. 2021. Nycflights13: Flights That Departed NYC in 2013. https://github.com/hadley/nycflights13."
  },
  {
    "objectID": "02-visualization.html",
    "href": "02-visualization.html",
    "title": "2  Data Visualization",
    "section": "",
    "text": "Under Construction\n\n\n\nCurrently working on content transfer from previous version of the book."
  },
  {
    "objectID": "03-wrangling.html",
    "href": "03-wrangling.html",
    "title": "3  Data Wrangling",
    "section": "",
    "text": "Under Construction\n\n\n\nCurrently working on content transfer from previous version of the book."
  },
  {
    "objectID": "04-tidy.html",
    "href": "04-tidy.html",
    "title": "4  Data Importing & “Tidy Data”",
    "section": "",
    "text": "Under Construction\n\n\n\nCurrently working on content transfer from previous version of the book."
  },
  {
    "objectID": "05-regression.html",
    "href": "05-regression.html",
    "title": "5  Basic Regression",
    "section": "",
    "text": "Under Construction\n\n\n\nCurrently working on content transfer from previous version of the book."
  },
  {
    "objectID": "06-multiple-regression.html",
    "href": "06-multiple-regression.html",
    "title": "6  Multiple Regression",
    "section": "",
    "text": "Under Construction\n\n\n\nCurrently working on content transfer from previous version of the book."
  },
  {
    "objectID": "07-causality.html",
    "href": "07-causality.html",
    "title": "7  Randomization and Causality",
    "section": "",
    "text": "Under Construction\n\n\n\nCurrently working on content transfer from previous version of the book."
  },
  {
    "objectID": "08-populations.html",
    "href": "08-populations.html",
    "title": "8  Populations and Generalizability",
    "section": "",
    "text": "Under Construction\n\n\n\nCurrently working on content transfer from previous version of the book."
  },
  {
    "objectID": "09-sampling-distributions.html",
    "href": "09-sampling-distributions.html",
    "title": "9  Sampling Distributions",
    "section": "",
    "text": "Under Construction\n\n\n\nCurrently working on content transfer from previous version of the book."
  },
  {
    "objectID": "10-confidence-intervals.html",
    "href": "10-confidence-intervals.html",
    "title": "10  Confidence Intervals",
    "section": "",
    "text": "Under Construction\n\n\n\nCurrently working on content transfer from previous version of the book."
  },
  {
    "objectID": "11-p-values.html",
    "href": "11-p-values.html",
    "title": "11  P-values",
    "section": "",
    "text": "Under Construction\n\n\n\nCurrently working on content transfer from previous version of the book."
  },
  {
    "objectID": "12-hypothesis-tests.html",
    "href": "12-hypothesis-tests.html",
    "title": "12  Hypothesis tests",
    "section": "",
    "text": "Under Construction\n\n\n\nCurrently working on content transfer from previous version of the book."
  },
  {
    "objectID": "13-putting-together.html",
    "href": "13-putting-together.html",
    "title": "13  Putting it all together",
    "section": "",
    "text": "Under Construction\n\n\n\nCurrently working on content transfer from previous version of the book."
  },
  {
    "objectID": "references.html",
    "href": "references.html",
    "title": "References",
    "section": "",
    "text": "Ismay, Chester. 2016. Getting Used to r, RStudio, and r\nMarkdown. http://ismayc.github.io/rbasics-book.\n\n\nWickham, Hadley. 2021. Nycflights13: Flights That Departed NYC in\n2013. https://github.com/hadley/nycflights13."
  },
  {
    "objectID": "statistical-background.html",
    "href": "statistical-background.html",
    "title": "Appendix A — Statistical Background",
    "section": "",
    "text": "Under Construction\n\n\n\nCurrently working on content transfer from previous version of the book."
  }
]